package nl.merapar.stack.service.rest.problem;

import java.util.ArrayList;
import java.util.List;
import java.util.UUID;

import javax.validation.Valid;
import javax.validation.constraints.DecimalMax;
import javax.validation.constraints.DecimalMin;
import javax.validation.constraints.NotNull;

import org.springframework.http.MediaType;

import lombok.AccessLevel;
import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.NoArgsConstructor;
import lombok.Setter;

/**
 * A standard problem detail definition used to represent Exceptions in Rest services.
 * Instead of an Exception a Problem is send as response to the client.
 * 
 * the conversion from Exception to Problem is done in {@link GlobalExceptionHandler} 
 */
@Data
@Builder
@AllArgsConstructor
@NoArgsConstructor
public class Problem   {

    public static final String TYPE_PROBLEM = "problem";
    public static final String TYPE_TRACEABLE_PROBLEM = "traceable-problem";
    public static final String TYPE_CONSTRAINT_VIOLATIONS = "constraint-violation";

    /**
     * The 'application/problem+json' media type as string.
     */
    public static final String PROBLEM_JSON = "application/problem+json";

    /**
     * The 'application/problem+json' media type.
     */
    public static final MediaType MEDIA_TYPE_PROBLEM_JSON = MediaType.valueOf(PROBLEM_JSON);

    /**
     * An indication that identifies the problem type.  
     *
     * Example: traceable-problem
     * Default: "problem"
     */
    @Builder.Default
    private String type = TYPE_PROBLEM;

    /**
     * A short, summary of the problem type. Written in english and readable for engineers 
     * (usually not suited for non technical stakeholders and not localized) 
     *
     * Example: Service Unavailable
     */
    @NotNull
    private String title;

    /**
     * The HTTP status code generated by the origin server for this occurrence of the problem. 
     *
     * Minimum value: 100
     * Maximum value: 600 (exclusive)
     *
     * Example: 503
     */
    @NotNull
    @DecimalMin("100") @DecimalMax(inclusive=false, value="600") 
    private Integer status;

    /**
     * A human readable explanation specific to this occurrence of the problem. 
     *
     * Example: Connection to database timed out
     */
    private String detail;

    /**
     * An absolute or relative URI that identifies the specific occurrence of the problem. 
     * It may or may not yield further information if dereferenced. 
     *
     * Example: /account/12345/msgs/abc
     */
    private String instance;

    /**
     * A universally unique identifier of the problem.
     *
     * Example: 86e43f74-a86f-445a-ace7-d6e7ed1c90d0
     */
    private UUID id;

    /**
     * A standardized error code.
     *
     * Example: CannotConnectToHost
     */
    private String code;

    /**
     * The 'violations' property.
     *
     * Default: new ArrayList<>()
     */
    @Valid
    @Builder.Default
    @Setter(AccessLevel.NONE)
    private List<ConstraintViolation> violations = new ArrayList<>();

}